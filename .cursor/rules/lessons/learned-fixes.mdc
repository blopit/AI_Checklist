---
description: 
globs: 
---
# Lessons Learned Rules

## Environment Setup
- Use Python venv in ./venv
- Include debug info in program output
- Read files before editing
- Handle file encodings properly
- Ensure database drivers (psycopg2) are installed
- Use environment variables for configuration
- Set proper Python path for imports

## Database Setup
- Start with minimal schema for prototypes
- Use SQLAlchemy for ORM
- Implement proper database migrations
- Handle database connections safely
- Use connection pooling
- Set up cascading deletes where appropriate
- Add proper foreign key constraints
- Ensure migrations are in correct directory (migrations/versions)
- Copy existing migrations to versions directory if needed
- Always verify database tables are created after migrations
- Handle migration dependencies properly
- Check migration revision IDs match between files

## Database Migration Fixes
- When "relation does not exist" error occurs:
  1. Verify alembic.ini has correct database URL
  2. Check migrations/versions directory exists and contains migration files
  3. Copy any existing migrations to migrations/versions/
  4. Run `alembic upgrade head` to apply migrations
  5. Verify tables are created in database
- Common migration issues:
  1. Missing migration files in versions directory
  2. Incorrect migration revision IDs
  3. Missing database driver (psycopg2)
  4. Wrong database URL in alembic.ini
  5. Incorrect Python path in env.py

## API Development
- Use FastAPI for rapid prototyping
- Implement proper Pydantic models
- Add proper type hints
- Handle async operations correctly
- Implement proper error handling
- Use dependency injection for database sessions
- Document API endpoints

## AI Integration
- Pin OpenAI package version or use latest API format
- Handle API versioning changes (openai>=1.0.0 vs <1.0.0)
- Implement proper error handling for AI responses
- Use system messages for context
- Structure function calls properly
- Keep conversation context for better assistance
- Validate AI responses before applying changes

## Best Practices
- Follow conventional commits
- Write clear documentation
- Test thoroughly
- Monitor performance
- Keep prototypes lean but extensible
- Use proper code organization
- Handle resource cleanup
- Check package compatibility before upgrading

## Common Fixes
- Use seaborn-v0_8 style name
- Handle UTF-8 encoding
- Add stderr debug info
- Clean stdout output
- Fix import paths in migration files
- Handle database connection errors
- Implement proper error responses
- Pin package versions for stability
- Update OpenAI API calls for v1.0.0
- Fix database migration issues by following proper steps

<rule>
name: lessons_learned
description: Rules based on experience and fixes
filters:
  - type: event
    pattern: "error_fix|improvement"
  - type: content
    pattern: "fix|improve|learn"

actions:
  - type: enforce
    conditions:
      - pattern: "debug_info"
        message: "Include debug information"
      - pattern: "file_read"
        message: "Read file before editing"
      - pattern: "db_session"
        message: "Properly handle database sessions"
      - pattern: "error_handling"
        message: "Implement proper error handling"
      - pattern: "api_version"
        message: "Check API version compatibility"
      - pattern: "db_migration"
        message: "Follow proper database migration steps"

  - type: suggest
    message: |
      Remember these lessons:
      1. Use virtual environment
      2. Include debug info
      3. Read before edit
      4. Document fixes
      5. Update rules
      6. Handle resources properly
      7. Keep prototypes simple
      8. Plan for extensibility
      9. Check API versions
      10. Pin package versions
      11. Follow migration steps
      12. Verify database setup

metadata:
  priority: high
  version: 1.3
</rule> 